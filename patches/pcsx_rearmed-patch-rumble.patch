diff --git a/frontend/libretro.c b/frontend/libretro.c
index a26d466..f69ffcf 100644
--- a/frontend/libretro.c
+++ b/frontend/libretro.c
@@ -39,6 +39,9 @@
 
 #include <libretro.h>
 #include "libretro_core_options.h"
+#include <stdio.h>
+#include <unistd.h>
+#include <errno.h>
 
 #ifdef USE_LIBRETRO_VFS
 #include <streams/file_stream_transforms.h>
@@ -511,6 +514,36 @@ void plat_trigger_vibrate(int pad, int low, int high)
 
    if (in_enable_vibration)
    {
+    FILE *file;
+    int total_strength;
+
+    if (high > 0){
+       if ((file = fopen("/sys/class/pwm/pwmchip0/pwm0/duty_cycle", "r+"))) {
+          total_strength = 1000000 - (((double)high * 1000000) / 255.0);
+          fputs(total_strength, file);
+          fclose(file);
+       } else if ((file = fopen("/sys/class/pwm/pwmchip1/pwm0/duty_cycle", "r+"))) {
+          total_strength = 1000000 - (((double)high * 1000000) / 255.0);
+          fputs(total_strength, file);
+          fclose(file);
+       }
+    } else if (low > 0){
+       if ((file = fopen("/sys/class/pwm/pwmchip0/pwm0/duty_cycle", "r+"))) {
+          fputs("600000", file);
+          fclose(file);
+       } else if ((file = fopen("/sys/class/pwm/pwmchip1/pwm0/duty_cycle", "r+"))) {
+          fputs("600000", file);
+          fclose(file);
+       }
+    } else {
+       if ((file = fopen("/sys/class/pwm/pwmchip0/pwm0/duty_cycle", "r+"))) {
+          fputs("1000000", file);
+          fclose(file);
+       } else if ((file = fopen("/sys/class/pwm/pwmchip1/pwm0/duty_cycle", "r+"))) {
+          fputs("1000000", file);
+          fclose(file);
+       }
+    }
       rumble_cb(pad, RETRO_RUMBLE_STRONG, high << 8);
       rumble_cb(pad, RETRO_RUMBLE_WEAK, low ? 0xffff : 0x0);
    }
@@ -1854,8 +1887,18 @@ static void update_variables(bool in_flight)
    {
       if (strcmp(var.value, "disabled") == 0)
          in_enable_vibration = 0;
-      else if (strcmp(var.value, "enabled") == 0)
+      else if (strcmp(var.value, "enabled") == 0) {
          in_enable_vibration = 1;
+         // Check write access for duty cycle for rk3566
+         char* filepath = "/sys/class/pwm/pwmchip1/pwm0/duty_cycle";
+         int returnval;
+         returnval = access (filepath, F_OK);
+         if (returnval == 0){
+           returnval = access (filepath, W_OK);
+           if (errno == EACCES)
+             system("sudo chmod 777 /sys/class/pwm/pwmchip1/pwm0/duty_cycle &");
+         }
+      }
    }
 
    var.value = NULL;
